import { ConsultationRequest, TelegramConfig, TelegramNotification } from '../types/consultation';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
 */
export class TelegramNotificationService {
  private config: TelegramConfig;

  constructor(config: TelegramConfig) {
    this.config = config;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
   */
  async sendConsultationNotification(request: ConsultationRequest): Promise<boolean> {
    try {
      const message = this.formatConsultationMessage(request);
      
      const notification: TelegramNotification = {
        chatId: this.config.adminChatId,
        message,
        parseMode: 'HTML'
      };

      return await this.sendMessage(notification);
    } catch (error) {
      console.error('Error sending Telegram notification:', error);
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
   */
  private formatConsultationMessage(request: ConsultationRequest): string {
    const timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });

    let message = `
üöÄ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!</b>

üìÖ <b>–î–∞—Ç–∞:</b> ${timestamp}
üë§ <b>–ò–º—è:</b> ${this.escapeHtml(request.name)}
üìß <b>Email:</b> ${this.escapeHtml(request.email)}`;

    if (request.phone) {
      message += `\nüìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${this.escapeHtml(request.phone)}`;
    }

    if (request.company) {
      message += `\nüè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${this.escapeHtml(request.company)}`;
    }

    message += `\nüéØ <b>–£—Å–ª—É–≥–∞:</b> ${this.escapeHtml(request.serviceType)}`;

    if (request.budget) {
      message += `\nüí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${this.escapeHtml(request.budget)}`;
    }

    if (request.timeline) {
      message += `\n‚è∞ <b>–°—Ä–æ–∫–∏:</b> ${this.escapeHtml(request.timeline)}`;
    }

    message += `\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b>\n${this.escapeHtml(request.projectDescription)}`;

    if (request.additionalInfo) {
      message += `\n\nüí¨ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n${this.escapeHtml(request.additionalInfo)}`;
    }

    message += `\n\n#–Ω–æ–≤–∞—è_–∑–∞—è–≤–∫–∞ #–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è`;

    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
   */
  private async sendMessage(notification: TelegramNotification): Promise<boolean> {
    const url = `https://api.telegram.org/bot${this.config.botToken}/sendMessage`;
    
    const payload = {
      chat_id: notification.chatId,
      text: notification.message,
      parse_mode: notification.parseMode || 'HTML',
      disable_web_page_preview: true
    };

    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('Telegram API error:', errorData);
        return false;
      }

      const result = await response.json();
      console.log('Telegram message sent successfully:', result.message_id);
      return true;
    } catch (error) {
      console.error('Error sending message to Telegram:', error);
      return false;
    }
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è Telegram
   */
  private escapeHtml(text: string): string {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  async sendTestMessage(): Promise<boolean> {
    const testNotification: TelegramNotification = {
      chatId: this.config.adminChatId,
      message: 'üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞—è–≤–∫–∞—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
      parseMode: 'HTML'
    };

    return await this.sendMessage(testNotification);
  }
}
